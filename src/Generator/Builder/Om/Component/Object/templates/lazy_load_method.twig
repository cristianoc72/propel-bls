$c = $this->buildPkeyCriteria();
$c->addSelectColumn({{ column.constantName }});
try {
{% if isSqlServer %}
    $row = array(0 => null);
    $dataFetcher = {{ queryName }}::create(null, $c)->setFormatter(ModelCriteria::FORMAT_STATEMENT)->find($con);
    if ($dataFetcher instanceof PDODataFetcher) {
        $dataFetcher->bindColumn(1, $row[0], PDO::PARAM_LOB, 0, PDO::SQLSRV_ENCODING_BINARY);
    }
    $row = $dataFetcher->fetch(PDO::FETCH_BOUND);
    $dataFetcher->close();
{% else %}
    $dataFetcher = {{ queryName }}::create(null, $c)->setFormatter(ModelCriteria::FORMAT_STATEMENT)->find($con);
    $row = $dataFetcher->fetch();
    $dataFetcher->close();
{% endif %}
    $firstColumn = $row ? current($row) : null;
{% if isOracle %}
    if ($firstColumn) {
        $this->{{ columnName }} = stream_get_contents($firstColumn);
    }
{% elseif lobNoStream %}
    if ($firstColumn !== null) {
        $this->{{ columnName }} = fopen('php://memory', 'r+');
        fwrite($this->{{ columnName }}, $firstColumn);
        rewind($this->{{ columnName }});
    } else {
        $this->{{ columnName }} = null;
    }
{% elseif column.isPhpPrimitiveType %}
    $this->{{ columnName }} = ($firstColumn !== null) ? ({{ column.phpType }}) $firstColumn : null;
{% elseif column.isPhpObjectType %}
    $this->{{ columnName }} = ($firstColumn !== null) ? new {{ column.getPhpType }}($firstColumn) : null;
{% else %}
    $this->{{ columnName }} = $firstColumn;
{% endif %}

    $this->{{ columnName }}_isLoaded = true;
} catch (Exception $e) {
    throw new PropelException("Error loading value for [{{ columnName }}] column on demand.", 0, $e);
}
